from board import Board
from disk import Disk
import random

pressed = False
coordinates = []
player1 = True
d = None
col = None
over = False


class GameController:
    def __init__(self, ROW_NUM, COL_NUM):
        self.ROW_NUM = ROW_NUM
        self.COL_NUM = COL_NUM
        self.board = Board(self.ROW_NUM, self.COL_NUM)
        self.current_width = [550, 550,550,550,550,550,550]
        self.player1_win = False
        self.player2_win = False
        self.X_COORDINATES = [50,150,250,350,450,550,650]
        self.Y_COORDINATES = [50,150,250,350,450,550]
        self.time = 60
        self.is_player_turn = True
        self.ai_disk = []
        self.time = 60
    
    def computer_make_move(self):
        next_x = random.randint(0,self.COL_NUM-1)
        next_y = random.randint(0,self.ROW_NUM-1)
        
        while self.board.grid[next_y][next_x] is not None:
            next_x = random.randint(0,self.COL_NUM-1)
            next_y = random.randint(0,self.ROW_NUM-1)
            
        x = self.X_COORDINATES[next_x]
        y = -45
        #d = Disk(x,y,203)
        #d.draw_me(d.col,d.x,d.y)
        d = self.handle_mouse_press(x,y,203)
        self.handle_mouse_release(d)
        self.is_player_turn = True
        print("player's move")

    def update(self):
        """update the game every frame"""
        global pressed
        global coordinates
        global player1
        global d
        global col
        global over
        ZONE = 700

        self.board.draw_me()
        if (not over):
            # if game is not over
            if self.is_player_turn:
                col = 0
               
                
                if(mousePressed):
                    if (mouseY < ZONE):
                        # only when mouseY is in this zone, show the disk
                        pressed = True
                        d = self.handle_mouse_press(mouseX, mouseY, col)
                        
                elif (pressed):
                    if(mouseY < ZONE):
                        if (d is not None):
                            self.handle_mouse_release(d)
                            player1 = False
                    pressed = False
                    self.is_player_turn = False
            elif self.is_player_turn is False:
            
                
                col = 203
                self.time -= 0.5
                if(self.time == 0):
                    self.computer_make_move()
                    self.time = 60
                    

                # when mouseY is out of zone, need to reset pressed
        # display the disk after dropping is finished
        for i in range(len(coordinates)):
            co = coordinates[i]
            self.stay(co)
        for i in range(len(self.ai_disk)):
            co = self.ai_disk[i]
            self.stay(co)
        
        
        

        self.check_over()
        self.board.draw_me()
    
    
    def check_row_win(self):
        """ check each row if there is a winning situation"""
        for i in range(self.ROW_NUM):
            for j in range(self.COL_NUM):
                try:
                    #print(i)
                    #print(j)
                    if (self.board.grid[i][j] == 1 and self.board.grid[i+1][j] == 1 and
                       self.board.grid[i+2][j] == 1 and self.board.grid[i+3][j] == 1):
                           self.player1_win = True
                    elif (self.board.grid[i][j] == 2 and self.board.grid[i+1][j] == 2 and
                         self.board.grid[i+2][j] == 2 and self.board.grid[i+3][j] == 2):
                           self.player2_win = True
                except IndexError:
                    return
                           
    def check_column_win(self):
        """ check each column if there is a winning situation"""
        for i in range(self.ROW_NUM):
            for j in range(self.COL_NUM):
                try:
                    if (self.board.grid[i][j] == 1 and self.board.grid[i][j+1] == 1 and
                       self.board.grid[i][j+2] == 1 and self.board.grid[i][j+3] == 1):
                           self.player1_win = True
                    elif (self.board.grid[i][j] == 2 and self.board.grid[i][j+1] == 2 and
                         self.board.grid[i][j+2] == 2 and self.board.grid[i][j+3] == 2):
                           self.player2_win = True
                except IndexError:
                    return
    
    def check_diagional_win(self):
        """ check each diagional if there is a winning situation """
        for i in range(self.ROW_NUM):
            for j in range(self.COL_NUM):
                try:
                    if (self.board.grid[i][j] == 1 and self.board.grid[i+1][j-1] == 1 and
                       self.board.grid[i+2][j-2] == 1 and self.board.grid[i+3][j-3] == 1):
                           self.player1_win = True
                    elif (self.board.grid[i][j] == 2 and self.board.grid[i+1][j-1] == 2 and
                         self.board.grid[i+2][j-2] == 2 and self.board.grid[i+3][j-3] == 2):
                           self.player2_win = True
                except IndexError:
                    return
        

        

    def check_over(self):
        """check if the game is over"""
        global over
        self.check_column_win()
        self.check_row_win()
        self.check_diagional_win()
        FILL = (200, 3, 0)
        SIZE = 28
        X = 29
        Y = -20
        fill(*FILL)
        
        if self.player1_win == True:
            self.get_player_name()
            textSize(SIZE)
            text("Player1 wins!",X,Y)
            print("Player1 wins!")
            over = True
            
            
        elif self.player2_win == True:
            self.get_player_name()
            textSize(SIZE)
            text("Player2 wins!",X,Y)
            print("Player2 wins!")
            over = True
        

    def convert(self, pressed_x):
        """ from x posistion, tell which column the disk is located"""
       
        for i in range(len(self.X_COORDINATES)):
            if pressed_x == self.X_COORDINATES[i]:
                return i
            
    def convert_y(self,y):
        """ convert y position to row number in the grid"""
        
        for i in range(len(self.Y_COORDINATES)):
            if y == self.Y_COORDINATES[i]:
                return i; 

    def handle_mouse_press(self, mouseX, mouseY, col):
        """ handle disk dropping animation"""
        
        ZONE = 700
        #X_COORDINATES = [50,150,250,350,450,550,650]
        disk_x = 50
        if (0 < mouseX and mouseX < 50):
            disk_x = self.X_COORDINATES[0]
        elif (50 < mouseX and mouseX < 150):
            disk_x = self.X_COORDINATES[1]
        elif (150< mouseX and mouseX < 250):
            disk_x = self.X_COORDINATES[2]
        elif (250< mouseX and mouseX < 350):
            disk_x = self.X_COORDINATES[3]
        elif (350< mouseX and mouseX < 450):
            disk_x = self.X_COORDINATES[4]
        elif (450< mouseX and mouseX < 550):
            disk_x = self.X_COORDINATES[5]
        elif (550< mouseX and mouseX < 650):
            disk_x = self.X_COORDINATES[6]
        

        #limit = self.current_width[0]
        d = Disk(disk_x, -45,col)
        d.draw_me(col, disk_x, -45)
        return d

    def handle_mouse_release(self, d):
        d.y = -45
        ACC = 0.5
        UPDATE = 100
        limit = self.current_width[self.convert(d.x)]
        if (limit > 0):
            while (d.y < limit):
                d.y = d.y + ACC
                d.draw_me(col, d.x, d.y)
            
            
            self.current_width[self.convert(d.x)] -= UPDATE
        if not over:
            if d.col == 0:
                self.board.grid[self.convert_y(d.y)][self.convert(d.x)] = 1
                coordinates.append(d)
            else:
                self.board.grid[self.convert_y(d.y)][self.convert(d.x)] = 2
                self.ai_disk.append(d)
        print("computer's move")
        
                
        #print(self.board.grid)
        
            

    def stay(self, disk):
        disk.display(disk)
        
    def setup(self):
        answer = self.input('enter your name')
        if answer:
            print('hi ' + answer)
        elif answer == '':
            print('[empty string]')
        else:
            print(answer) # Canceled dialog will print None

    def input(self,message=''):
        from javax.swing import JOptionPane
        return JOptionPane.showInputDialog(frame, message)

    def get_player_name(self):
        answer = self.input()
        self.save_name(answer)

    def find_score(self,file_name):
        score = 0
        try:
            with open(file_name) as file:
                score = int(file.readline().strip().split(" ")[-1])
        except Exception:
            with open(file_name,"w+") as file:
                file.write("")
        return score
    
    def save_name(self,name,file_name = "scores.txt"):
        if name is not None and name != "Unknown":
            content = name + " " + str(self.win_time) + "\n"
            with open(file_name,"r+") as file:
                read = file.read()
                file.seek(0,0)
                file.write(content)
                file.write(read)
